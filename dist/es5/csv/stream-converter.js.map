{"version":3,"file":"stream-converter.js","names":["jconv","StreamConverter","inner","options","innerEncoding","toUpperCase","outerEncoding","innerBOM","outerBOM","writeStarted","data","Buffer","from","convert","event","handler","addListener","removeListener","encoding","callback","Function","undefined","write","length","bomless","alloc","copy","convertInwards","destination","reverseConverter","pipe","close","type","on","chunk","convertOutwards","once","end","value","emit","module","exports"],"sources":["../../../lib/csv/stream-converter.js"],"sourcesContent":["// =======================================================================================================\n// StreamConverter\n//\n// convert between encoding schemes in a stream\n// Work in Progress - Will complete this at some point\nlet jconv;\n\nclass StreamConverter {\n  constructor(inner, options) {\n    this.inner = inner;\n\n    options = options || {};\n    this.innerEncoding = (options.innerEncoding || 'UTF8').toUpperCase();\n    this.outerEncoding = (options.outerEncoding || 'UTF8').toUpperCase();\n\n    this.innerBOM = options.innerBOM || null;\n    this.outerBOM = options.outerBOM || null;\n\n    this.writeStarted = false;\n  }\n\n  convertInwards(data) {\n    if (data) {\n      if (typeof data === 'string') {\n        data = Buffer.from(data, this.outerEncoding);\n      }\n\n      if (this.innerEncoding !== this.outerEncoding) {\n        data = jconv.convert(data, this.outerEncoding, this.innerEncoding);\n      }\n    }\n\n    return data;\n  }\n\n  convertOutwards(data) {\n    if (typeof data === 'string') {\n      data = Buffer.from(data, this.innerEncoding);\n    }\n\n    if (this.innerEncoding !== this.outerEncoding) {\n      data = jconv.convert(data, this.innerEncoding, this.outerEncoding);\n    }\n    return data;\n  }\n\n  addListener(event, handler) {\n    this.inner.addListener(event, handler);\n  }\n\n  removeListener(event, handler) {\n    this.inner.removeListener(event, handler);\n  }\n\n  write(data, encoding, callback) {\n    if (encoding instanceof Function) {\n      callback = encoding;\n      encoding = undefined;\n    }\n\n    if (!this.writeStarted) {\n      // if inner encoding has BOM, write it now\n      if (this.innerBOM) {\n        this.inner.write(this.innerBOM);\n      }\n\n      // if outer encoding has BOM, delete it now\n      if (this.outerBOM) {\n        if (data.length <= this.outerBOM.length) {\n          if (callback) {\n            callback();\n          }\n          return;\n        }\n        const bomless = Buffer.alloc(data.length - this.outerBOM.length);\n        data.copy(bomless, 0, this.outerBOM.length, data.length);\n        data = bomless;\n      }\n\n      this.writeStarted = true;\n    }\n\n    this.inner.write(\n      this.convertInwards(data),\n      encoding ? this.innerEncoding : undefined,\n      callback\n    );\n  }\n\n  read() {\n    // TBD\n  }\n\n  pipe(destination, options) {\n    const reverseConverter = new StreamConverter(destination, {\n      innerEncoding: this.outerEncoding,\n      outerEncoding: this.innerEncoding,\n      innerBOM: this.outerBOM,\n      outerBOM: this.innerBOM,\n    });\n\n    this.inner.pipe(reverseConverter, options);\n  }\n\n  close() {\n    this.inner.close();\n  }\n\n  on(type, callback) {\n    switch (type) {\n      case 'data':\n        this.inner.on('data', chunk => {\n          callback(this.convertOutwards(chunk));\n        });\n        return this;\n      default:\n        this.inner.on(type, callback);\n        return this;\n    }\n  }\n\n  once(type, callback) {\n    this.inner.once(type, callback);\n  }\n\n  end(chunk, encoding, callback) {\n    this.inner.end(this.convertInwards(chunk), this.innerEncoding, callback);\n  }\n\n  emit(type, value) {\n    this.inner.emit(type, value);\n  }\n}\n\nmodule.exports = StreamConverter;\n"],"mappings":"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"}