{"version":3,"file":"stream-base64.js","names":["Stream","require","StreamBase64","pipes","encoding","destination","push","filter","pipe","Error","Duplex","module","exports"],"sources":["../../../lib/utils/stream-base64.js"],"sourcesContent":["const Stream = require('readable-stream');\n\n// =============================================================================\n// StreamBase64 - A utility to convert to/from base64 stream\n// Note: does not buffer data, must be piped\nclass StreamBase64 extends Stream.Duplex {\n  constructor() {\n    super();\n\n    // consuming pipe streams go here\n    this.pipes = [];\n  }\n\n  // writable\n  // event drain - if write returns false (which it won't), indicates when safe to write again.\n  // finish - end() has been called\n  // pipe(src) - pipe() has been called on readable\n  // unpipe(src) - unpipe() has been called on readable\n  // error - duh\n\n  write(/* data, encoding */) {\n    return true;\n  }\n\n  cork() {}\n\n  uncork() {}\n\n  end(/* chunk, encoding, callback */) {}\n\n  // readable\n  // event readable - some data is now available\n  // event data - switch to flowing mode - feeds chunks to handler\n  // event end - no more data\n  // event close - optional, indicates upstream close\n  // event error - duh\n  read(/* size */) {}\n\n  setEncoding(encoding) {\n    // causes stream.read or stream.on('data) to return strings of encoding instead of Buffer objects\n    this.encoding = encoding;\n  }\n\n  pause() {}\n\n  resume() {}\n\n  isPaused() {}\n\n  pipe(destination) {\n    // add destination to pipe list & write current buffer\n    this.pipes.push(destination);\n  }\n\n  unpipe(destination) {\n    // remove destination from pipe list\n    this.pipes = this.pipes.filter(pipe => pipe !== destination);\n  }\n\n  unshift(/* chunk */) {\n    // some numpty has read some data that's not for them and they want to put it back!\n    // Might implement this some day\n    throw new Error('Not Implemented');\n  }\n\n  wrap(/* stream */) {\n    // not implemented\n    throw new Error('Not Implemented');\n  }\n}\n\nmodule.exports = StreamBase64;\n"],"mappings":";;;;;;;;;;;;;;;AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,iBAAiB,CAAC;;AAEzC;AACA;AACA;AAAA,IACMC,YAAY;EAAA;EAAA;EAChB,wBAAc;IAAA;IAAA;IACZ;;IAEA;IACA,MAAKC,KAAK,GAAG,EAAE;IAAC;EAClB;;EAEA;EACA;EACA;EACA;EACA;EACA;EAAA;IAAA;IAAA,OAEA,gBAAM;IAAA,EAAsB;MAC1B,OAAO,IAAI;IACb;EAAC;IAAA;IAAA,OAED,gBAAO,CAAC;EAAC;IAAA;IAAA,OAET,kBAAS,CAAC;EAAC;IAAA;IAAA,OAEX,cAAI,iCAAiC,CAAC;;IAEtC;IACA;IACA;IACA;IACA;IACA;EAAA;IAAA;IAAA,OACA,eAAK,YAAY,CAAC;EAAC;IAAA;IAAA,OAEnB,qBAAYC,QAAQ,EAAE;MACpB;MACA,IAAI,CAACA,QAAQ,GAAGA,QAAQ;IAC1B;EAAC;IAAA;IAAA,OAED,iBAAQ,CAAC;EAAC;IAAA;IAAA,OAEV,kBAAS,CAAC;EAAC;IAAA;IAAA,OAEX,oBAAW,CAAC;EAAC;IAAA;IAAA,OAEb,cAAKC,WAAW,EAAE;MAChB;MACA,IAAI,CAACF,KAAK,CAACG,IAAI,CAACD,WAAW,CAAC;IAC9B;EAAC;IAAA;IAAA,OAED,gBAAOA,WAAW,EAAE;MAClB;MACA,IAAI,CAACF,KAAK,GAAG,IAAI,CAACA,KAAK,CAACI,MAAM,CAAC,UAAAC,IAAI;QAAA,OAAIA,IAAI,KAAKH,WAAW;MAAA,EAAC;IAC9D;EAAC;IAAA;IAAA,OAED,kBAAQ;IAAA,EAAa;MACnB;MACA;MACA,MAAM,IAAII,KAAK,CAAC,iBAAiB,CAAC;IACpC;EAAC;IAAA;IAAA,OAED,eAAK;IAAA,EAAc;MACjB;MACA,MAAM,IAAIA,KAAK,CAAC,iBAAiB,CAAC;IACpC;EAAC;EAAA;AAAA,EA/DwBT,MAAM,CAACU,MAAM;AAkExCC,MAAM,CAACC,OAAO,GAAGV,YAAY"}