{"version":3,"file":"base-xform.js","names":["parseSax","require","XmlStream","BaseXform","node","text","name","model","options","map","Object","values","forEach","xform","reset","obj","assign","saxParser","events","eventType","value","parseOpen","parseText","parseClose","stream","parse","toXml","xmlStream","render","xml","dflt","always","undefined","toString","toAttribute","attr","parseInt","parseFloat","module","exports"],"sources":["../../../../lib/xlsx/xform/base-xform.js"],"sourcesContent":["const parseSax = require('../../utils/parse-sax');\nconst XmlStream = require('../../utils/xml-stream');\n\n/* 'virtual' methods used as a form of documentation */\n/* eslint-disable class-methods-use-this */\n\n// Base class for Xforms\nclass BaseXform {\n  // constructor(/* model, name */) {}\n\n  // ============================================================\n  // Virtual Interface\n  prepare(/* model, options */) {\n    // optional preparation (mutation) of model so it is ready for write\n  }\n\n  render(/* xmlStream, model */) {\n    // convert model to xml\n  }\n\n  parseOpen(node) {\n    // XML node opened\n  }\n\n  parseText(text) {\n    // chunk of text encountered for current node\n  }\n\n  parseClose(name) {\n    // XML node closed\n  }\n\n  reconcile(model, options) {\n    // optional post-parse step (opposite to prepare)\n  }\n\n  // ============================================================\n  reset() {\n    // to make sure parses don't bleed to next iteration\n    this.model = null;\n\n    // if we have a map - reset them too\n    if (this.map) {\n      Object.values(this.map).forEach(xform => {\n        if (xform instanceof BaseXform) {\n          xform.reset();\n        } else if (xform.xform) {\n          xform.xform.reset();\n        }\n      });\n    }\n  }\n\n  mergeModel(obj) {\n    // set obj's props to this.model\n    this.model = Object.assign(this.model || {}, obj);\n  }\n\n  async parse(saxParser) {\n    for await (const events of saxParser) {\n      for (const {eventType, value} of events) {\n        if (eventType === 'opentag') {\n          this.parseOpen(value);\n        } else if (eventType === 'text') {\n          this.parseText(value);\n        } else if (eventType === 'closetag') {\n          if (!this.parseClose(value.name)) {\n            return this.model;\n          }\n        }\n      }\n    }\n    return this.model;\n  }\n\n  async parseStream(stream) {\n    return this.parse(parseSax(stream));\n  }\n\n  get xml() {\n    // convenience function to get the xml of this.model\n    // useful for manager types that are built during the prepare phase\n    return this.toXml(this.model);\n  }\n\n  toXml(model) {\n    const xmlStream = new XmlStream();\n    this.render(xmlStream, model);\n    return xmlStream.xml;\n  }\n\n  // ============================================================\n  // Useful Utilities\n  static toAttribute(value, dflt, always = false) {\n    if (value === undefined) {\n      if (always) {\n        return dflt;\n      }\n    } else if (always || value !== dflt) {\n      return value.toString();\n    }\n    return undefined;\n  }\n\n  static toStringAttribute(value, dflt, always = false) {\n    return BaseXform.toAttribute(value, dflt, always);\n  }\n\n  static toStringValue(attr, dflt) {\n    return attr === undefined ? dflt : attr;\n  }\n\n  static toBoolAttribute(value, dflt, always = false) {\n    if (value === undefined) {\n      if (always) {\n        return dflt;\n      }\n    } else if (always || value !== dflt) {\n      return value ? '1' : '0';\n    }\n    return undefined;\n  }\n\n  static toBoolValue(attr, dflt) {\n    return attr === undefined ? dflt : attr === '1';\n  }\n\n  static toIntAttribute(value, dflt, always = false) {\n    return BaseXform.toAttribute(value, dflt, always);\n  }\n\n  static toIntValue(attr, dflt) {\n    return attr === undefined ? dflt : parseInt(attr, 10);\n  }\n\n  static toFloatAttribute(value, dflt, always = false) {\n    return BaseXform.toAttribute(value, dflt, always);\n  }\n\n  static toFloatValue(attr, dflt) {\n    return attr === undefined ? dflt : parseFloat(attr);\n  }\n}\n\nmodule.exports = BaseXform;\n"],"mappings":"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"}