{"version":3,"file":"merges.js","names":["_","require","Range","colCache","Enums","Merges","merges","merge","master","expandToAddress","address","range","map","mergeCells","rows","each","dimensions","decode","i","top","bottom","row","j","left","right","cell","cells","type","ValueType","Null","encodeAddress","Merge","tl","hash","module","exports"],"sources":["../../../../../lib/xlsx/xform/sheet/merges.js"],"sourcesContent":["const _ = require('../../../utils/under-dash');\n\nconst Range = require('../../../doc/range');\nconst colCache = require('../../../utils/col-cache');\nconst Enums = require('../../../doc/enums');\n\nclass Merges {\n  constructor() {\n    // optional mergeCells is array of ranges (like the xml)\n    this.merges = {};\n  }\n\n  add(merge) {\n    // merge is {address, master}\n    if (this.merges[merge.master]) {\n      this.merges[merge.master].expandToAddress(merge.address);\n    } else {\n      const range = `${merge.master}:${merge.address}`;\n      this.merges[merge.master] = new Range(range);\n    }\n  }\n\n  get mergeCells() {\n    return _.map(this.merges, merge => merge.range);\n  }\n\n  reconcile(mergeCells, rows) {\n    // reconcile merge list with merge cells\n    _.each(mergeCells, merge => {\n      const dimensions = colCache.decode(merge);\n      for (let i = dimensions.top; i <= dimensions.bottom; i++) {\n        const row = rows[i - 1];\n        for (let j = dimensions.left; j <= dimensions.right; j++) {\n          const cell = row.cells[j - 1];\n          if (!cell) {\n            // nulls are not included in document - so if master cell has no value - add a null one here\n            row.cells[j] = {\n              type: Enums.ValueType.Null,\n              address: colCache.encodeAddress(i, j),\n            };\n          } else if (cell.type === Enums.ValueType.Merge) {\n            cell.master = dimensions.tl;\n          }\n        }\n      }\n    });\n  }\n\n  getMasterAddress(address) {\n    // if address has been merged, return its master's address. Assumes reconcile has been called\n    const range = this.hash[address];\n    return range && range.tl;\n  }\n}\n\nmodule.exports = Merges;\n"],"mappings":";;;;;;;;AAAA,IAAMA,CAAC,GAAGC,OAAO,CAAC,2BAA2B,CAAC;AAE9C,IAAMC,KAAK,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AAC3C,IAAME,QAAQ,GAAGF,OAAO,CAAC,0BAA0B,CAAC;AACpD,IAAMG,KAAK,GAAGH,OAAO,CAAC,oBAAoB,CAAC;AAAC,IAEtCI,MAAM;EACV,kBAAc;IAAA;IACZ;IACA,IAAI,CAACC,MAAM,GAAG,CAAC,CAAC;EAClB;EAAC;IAAA;IAAA,OAED,aAAIC,KAAK,EAAE;MACT;MACA,IAAI,IAAI,CAACD,MAAM,CAACC,KAAK,CAACC,MAAM,CAAC,EAAE;QAC7B,IAAI,CAACF,MAAM,CAACC,KAAK,CAACC,MAAM,CAAC,CAACC,eAAe,CAACF,KAAK,CAACG,OAAO,CAAC;MAC1D,CAAC,MAAM;QACL,IAAMC,KAAK,aAAMJ,KAAK,CAACC,MAAM,cAAID,KAAK,CAACG,OAAO,CAAE;QAChD,IAAI,CAACJ,MAAM,CAACC,KAAK,CAACC,MAAM,CAAC,GAAG,IAAIN,KAAK,CAACS,KAAK,CAAC;MAC9C;IACF;EAAC;IAAA;IAAA,KAED,eAAiB;MACf,OAAOX,CAAC,CAACY,GAAG,CAAC,IAAI,CAACN,MAAM,EAAE,UAAAC,KAAK;QAAA,OAAIA,KAAK,CAACI,KAAK;MAAA,EAAC;IACjD;EAAC;IAAA;IAAA,OAED,mBAAUE,UAAU,EAAEC,IAAI,EAAE;MAC1B;MACAd,CAAC,CAACe,IAAI,CAACF,UAAU,EAAE,UAAAN,KAAK,EAAI;QAC1B,IAAMS,UAAU,GAAGb,QAAQ,CAACc,MAAM,CAACV,KAAK,CAAC;QACzC,KAAK,IAAIW,CAAC,GAAGF,UAAU,CAACG,GAAG,EAAED,CAAC,IAAIF,UAAU,CAACI,MAAM,EAAEF,CAAC,EAAE,EAAE;UACxD,IAAMG,GAAG,GAAGP,IAAI,CAACI,CAAC,GAAG,CAAC,CAAC;UACvB,KAAK,IAAII,CAAC,GAAGN,UAAU,CAACO,IAAI,EAAED,CAAC,IAAIN,UAAU,CAACQ,KAAK,EAAEF,CAAC,EAAE,EAAE;YACxD,IAAMG,IAAI,GAAGJ,GAAG,CAACK,KAAK,CAACJ,CAAC,GAAG,CAAC,CAAC;YAC7B,IAAI,CAACG,IAAI,EAAE;cACT;cACAJ,GAAG,CAACK,KAAK,CAACJ,CAAC,CAAC,GAAG;gBACbK,IAAI,EAAEvB,KAAK,CAACwB,SAAS,CAACC,IAAI;gBAC1BnB,OAAO,EAAEP,QAAQ,CAAC2B,aAAa,CAACZ,CAAC,EAAEI,CAAC;cACtC,CAAC;YACH,CAAC,MAAM,IAAIG,IAAI,CAACE,IAAI,KAAKvB,KAAK,CAACwB,SAAS,CAACG,KAAK,EAAE;cAC9CN,IAAI,CAACjB,MAAM,GAAGQ,UAAU,CAACgB,EAAE;YAC7B;UACF;QACF;MACF,CAAC,CAAC;IACJ;EAAC;IAAA;IAAA,OAED,0BAAiBtB,OAAO,EAAE;MACxB;MACA,IAAMC,KAAK,GAAG,IAAI,CAACsB,IAAI,CAACvB,OAAO,CAAC;MAChC,OAAOC,KAAK,IAAIA,KAAK,CAACqB,EAAE;IAC1B;EAAC;EAAA;AAAA;AAGHE,MAAM,CAACC,OAAO,GAAG9B,MAAM"}